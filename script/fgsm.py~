from pytorchcv.model_provider import get_model as ptcv_get_model
import torch
import PIL
import numpy as np
import matplotlib.pyplot as plt 

from argparse import ArgumentParser
from torch import nn
from torch import optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
import torch
import torchvision
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader

import os
import logging
import datetime
from tqdm import tqdm


class_name = {
    0 : 'airplane',
    1 : 'automobile',
    2 : 'bird',
    3 : 'cat',
    4 : 'deer',
    5 : 'dog',
    6 : 'frog',
    7 : 'horse',
    8 : 'ship',
    9 : 'truck'
}

def unpickle(file):
    import pickle
    with open(file, 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

def get_transform(size):
    mean_nums = [0.5, 0.5, 0.5]
    std_nums  = [0.25, 0.25, 0.25]
    
    predict_transform = transforms.Compose([
        transforms.Resize(size, size),
        transforms.ToTensor(),
        transforms.Normalize(mean_nums, std_nums),
    ])
    return predict_transform



def main(args):
    # model
    model = ptcv_get_model("resnet20_cifar10", pretrained=True)
    print(model)
    
    filenames = []
    for i in range(1, 6):
        filenames.append('../data/data_batch_' + str(i))
    

    #x = torch.randn(1, 3, 224, 224)
    # batch_size, channel, h, w
    y = model(x)


def parse_argument():
    parser = ArgumentParser()
    args = parser.parse_args()
    return args

if __name__=='__main__':
    args = parse_argument()

    loglevel = os.environ.get('LOGLEVEL', 'INFO').upper()
    logging.basicConfig(
        format='%(asctime)s | %(levelname)s | %(message)s',
        level=loglevel,
        datefmt='%m-%d %H:%M:%S'
    )
    main(args)













